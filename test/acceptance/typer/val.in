val foo = "hi there";
val foo as (bar, baz) = (foo, 23);
val foo as (bar, _) = (2.5, 23);
val (bar, 23) = (2.5, 23);
val (bar, 23) = (2.5, 23i);
val {a, b=(foo, bar), c=_} = {a="hi", b=(true, 25i), c=(bar, foo)};
val {a, b} = {a="hi", b="there", c="oops"};
val {a, b, ...} = {a="hi", b="there", c="world"};
val {a, b, ...} = {b="where's a?", c="oops again"};
val [a, b, c] = [1, 2, 3];
val [a, b, c] = [1, 2];
val [a, b, c] = [1, 2, 3, 4];
val (::) (a, b) = [1, 2];
val (::) (a, b) = [1];
val (::) (a, b) = [];
val (::) (a, nil) = [];
val (::) (a, nil) = [1];
val (::) (a, nil) = [1, 2];
val (a, ref) = (1, 2);
val ref a = ref 2;
val ref a = ref [];
let val ref a = ref [] in a end;
(*dummy definitions*)
val (+) = fn (a : bigint, _ : bigint) => a;
val (-) = fn (a : bigint, _ : bigint) => a;
val rec f = fn 0 => 1
             | 1 => 1
             | x => (+) (f ((-) (x, 1)), f ((-) (x, 2)));
val map = fn f =>
    let
        val rec g = fn nil => nil
                     | ((::) (el, rest)) => (::) (f el, g rest)
    in
        g
    end;
val rec foldl = fn f => fn z =>
            fn nil => z
             | ((::) (x, xs)) => foldl f (f (z, x)) xs;
val sum = foldl (+) 0;
val rec even = fn 0 => true | n => odd ((-) (n, 1))
    and odd  = fn 0 => false | n => even ((-) (n, 1));
val 'a id = fn (z: 'a) => z;
val ('a, 'b) pair = fn (x: 'a, y: 'b) => (x, y);
val 'a rec f = fn nil : 'a list => [] : 'a list | ((::) (x, xs)) => f xs
       and foo = nil : 'a list;
val 'a foo = let val 'a bar = baz in bar end;
