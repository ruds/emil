(* Examples from various other places. *)

(* The next few are from
 * https://www.smlnj.org/doc/Conversion/types.html
 *)

(* dummy definitions *)
val ar = fn (_ : 'a ref, a : 'a) => ref a;
val dr = fn (ref a) => a;
val hd = fn ((::) (a, _)) => a;

(* Expansive: can't generalize *)
val x = ref nil;
val x : int list ref = ref nil;

(* Unifies *)
let val x = ref nil
 in ar (x, [3]);
    hd (dr x)
end;

(* Generalizes *)
val f = fn y => let val x = ref nil in x end;

(* Instantiates *)
let val y = let val x = ref nil in x end
 in ar (y, [true]);
    hd (dr y)
end;

val f = fn x => fn y => y;
val g = f 3;
val g = (fn y => (f 3) y);
val g = fn y => f 3 y;

val f = fn ((::) (x, l)) => (fn y => y);
val g = f nil;
val g = fn y => f nil y;

val counter = ref(ref 0);
val mkCountF = fn f =>
    let val x = ref 0
        val f2 = fn z => (ar (x, dr x); f z)
     in ar (counter, x);
        f2
     end;
val pair = fn x => (x, x);
val cpair = mkCountF pair;
val cpairCalls = dr counter;
val cpair' = (fn y => mkCountF pair y);

let val r = ref(fn x => x)
 in (dr r) 5
end;

let val r = ref(fn x => x)
 in (dr r) 5; (dr r) true
end;

val f = fn () =>
    let val r = ref(fn x => x)
     in (dr r)
    end;

val x = ref(fn x => x);

val x = (let val id : 'a -> 'a = fn z => z in id id end,
         fn y => y);
val x = (let val id : 'a -> 'a = fn z => z in id id end,
         fn (y: 'a) => y);
val x = let val 'a id : 'a -> 'a = fn z => z in id id end;
val 'a x = let val id : 'a -> 'a = fn z => z in id id end;
val 'a x = let val 'a id : 'a -> 'a = fn z => z in id id end;
val x = (let val 'a id : 'a -> 'a = fn z => z in id id end,
         fn (y: 'a) => y);

datatype t1 = C1;
C1;

val x = let datatype t2 = C2 in C2 end;
let datatype t2 = C2 in C2 end;

fn x => let datatype t3 = C3
            val _ = case true of true => x | _ => C3
         in 5
        end;

(* From http://mlton.org/TypeVariableScope *)
val f = fn x =>
  let
    val g = fn (y: 'a) => case true of true => x | false => y
  in
    g x
  end;

val f = fn x =>
  let
    val 'a g = fn (y: 'a) => case true of true => x | false => y
  in
    g x
  end;

val 'a f = fn x =>
  let
    val g = fn (y: 'a) => case true of true => x | false => y
  in
    g x
  end;

(* From HaMLet S: To Become Or  Not To Become Successor ML :-)
 * Section 5.6 *)

let val r = ref [] in (ar (r, [C1])) end;

let val r = ref []
    datatype t4 = C4
 in
    (ar (r, [C4]))
end;
