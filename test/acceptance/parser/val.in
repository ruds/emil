val foo = bar;
val foo = bar.baz;
val foo as (num, str) = (1, "bar");
val (num, _) = (1, "bar");
val _ = foo;
val (++) = (+);
val (prefix +) = fn x => x;
val foo.bar.baz = t; (* parses OK - not a very useful assignment *)
val { foo, bar as (baz, quux), waldo = 2, ... } = xyzzy;
val () = foo;
val (foo, _, (++), (=), (*), bar) = baz;
val [] = foo;
val [foo as (_, bar), baz, {quux, waldo = (xyzzy, plugh)}, _] = grault;
val Foo bar = baz;
val (::) (foo, bar) = baz;
val foo :: bar = baz;
val (prefix ~) foo = bar;
val ~ foo = bar;
(* add parenthesized pattern, operator precedence tests *)
val { foo=bar, foo as (baz, quux) } = waldo;
val (_, 2.3) = foo; (* error - fp literals not allowed *)
val;;
val foo;
val foo =;;
val foo : bigint = baz;
val foo : (bigint * string) as (num, str) = baz;
val foo as (num : bigint, str : string) = baz;
val { foo : bigint,
      bar : (bigint * string) as (baz, quux),
      waldo = 2 : bigint,
      ... } = xyzzy;
val foo = 1 and bar = 2 and (baz, quux) = waldo;
val rec f = fn 0 => 1
             | 1 => 1
             | x => (+) (f ((-) x 1)) (f ((-) x 2));
val rec even = fn 0 => true | n => odd ((-) (n, 1))
    and odd  = fn 0 => false | n => even ((-) (n, 1));
val 'a id = fn (z: 'a) => z;
val ('a) id = fn (z: 'a) => z;
val ('a, 'b) pair = fn (x: 'a, y: 'b) => (x, y);
val ('b, 'a) pair = fn (x: 'a, y: 'b) => (x, y);
val 'a rec f = fn nil : 'a => [] | ((::) (x, xs)) => f xs
       and foo = fn () => nil : 'a;
val ('a, 'a) foo = bar;
val it = foo;
val (it, bar) = foo;
val rec a = foo and len = fn [] => 0 | ((::) (_, xs)) => ((+) (1, len xs));
val rec len = fn [] => 0 | ((::) (_, xs)) => ((+) (1, len xs)) and a = foo;
val a = foo and rec len = fn [] => 0 | ((::) (_, xs)) => ((+) (1, len xs));
val foo = bar val baz = quux;
