val foo = bar;
val foo = bar.baz;
val foo as (num, str) = (1, "bar");
val (num, _) = (1, "bar");
val _ = foo;
val (++) = (+);
val (prefix +) = fn x => x;
val foo.bar.baz = t; (* parses OK - not a very useful assignment *)
val { foo, bar as (baz, quux), waldo = 2, ... } = xyzzy;
val () = foo;
val (foo, _, (++), (=), (*), bar) = baz;
val [] = foo;
val [foo as (_, bar), baz, {quux, waldo = (xyzzy, plugh)}, _] = grault;
val Foo bar = baz;
val (::) (foo, bar) = baz;
val (prefix ~) foo = bar;
(* add parenthesized pattern, operator precedence tests *)
val { foo=bar, foo as (baz, quux) } = waldo;
val (_, 2.3) = foo; (* error - fp literals not allowed *)
val;;
val foo;
val foo =;;
val foo : bigint = baz;
val foo : (bigint * string) as (num, str) = baz;
val foo as (num : bigint, str : string) = baz;
val { foo : bigint,
      bar : (bigint * string) as (baz, quux),
      waldo = 2 : bigint,
      ... } = xyzzy;
val foo = 1 and bar = 2 and (baz, quux) = waldo;
