#+title: Specification of the Emil Programming Language
#+author: Matt Rudary

* Introduction

Emil is a programming language in the ML family. Its basic syntax and
semantics are similar to Standard ML, with a few extensions thrown in.
Like Standard ML, it is a functional language with strong, static
types and type inference, it is eagerly evaluated by default, and
supports imperative programming, side effects, and exception handling.
It has parametric modules, like Standard ML, but it also supports
overloading through an implicit module feature that is similar in
effect to Haskell's type classes.

This specification is far less formal than e.g. [[https://mitpress.mit.edu/9780262631815/][The Definition of
Standard ML]], but does use a fairly straight-forward BNF to describe
the grammar of the language. The following conventions are used:

- ~[pattern]~ :: optional
- ~pattern*~ :: zero or more repetitions
- ~pattern+~ :: one or more repetitions
- ~pat1 | pat2~ :: alternatives
- ~'X'~ :: terminal

Productions have the form

#+begin_src bnf
  nonterm -> pat1 | pat2 | ... | patn
#+end_src

In addition to restrictions elaborated in the text, two rules are
applied to the grammar productions. First, alternatives in a
production are presented in priority order. Second, productions
containing repetitions (~*~ or ~+~) match as extensively as possible.
These rules eliminate abiguities in the grammar.

* Lexical Structure

** Literals

*** Numeric Literals

#+begin_src bnf
  iliteral -> ['-'] iliteral-number ['i' | 'I']
  iliteral-number -> digit-seq
                  |  ('0x' | '0X') hex-digit+ ('_' hex-digit+)*
                  |  ('0o' | '0O') octal-digit+ ('_' octal-digit+)*
                  |  ('0b' | '0B') binary-digit+ ('_' binary-digit+)*
  digit-seq -> decimal-digit+ ('_' decimal-digit+)*

  fpliteral -> ['-'] digit-seq '.' [digit-seq] [fpliteral-exponent]
            |  ['-'] digit-seq fpliteral-exponent
            |  ['-'] digit-seq ('f' | 'F')
            |  ['-'] 'Inf'
            | 'NaN'
  fpliteral-exponent -> ('e' | 'E') ['-' | '+'] decimal-digit+
#+end_src

There are two productions for numeric literals: integral and floating
point.

Integral literals can be specified in decimal, hexadecimal, octal, or
binary notation. The type of the resulting constant is affected by the
suffix attached to the literal. Without a suffix, the literal is a
~bigint~, with ~i~ or ~I~ as a suffix, the literal is an ~int~, and
with ~b~ or ~B~ as a suffix, the literal is a ~byte~. An integral
literal whose value cannot be represented by its type is illegal.

Floating point numbers must have at least one digit before the decimal
point. Finite floating point literals that are greater than the
maximum finite value or less than the minimum finite value
representable by ~float~ are illegal, as are non-zero literals that
are between the maximum negative value and minimum positive value
representable by ~float~.

All numeric literals may contain underscores to separate groups of
digits. Each underscore must be preceded and followed by at least one
digit.

*** String and Character Literals

#+begin_src bnf
  f-string -> ('f' | 'F') string
  string -> '"' (s-char | escape | gap)* '"'
         |  '"""' (m-char | escape)* '"""'
         |  'R"' [rd-char-seq] '(' r-char-seq ')' [rd-char-seq] '"'
  char -> '#"' (s-char | escape) '"'
  gap -> '\' whitespace+ '\'
#+end_src

Characters in Emil are Unicode codepoints. Conceptually, strings are
sequences of characters, though they may be represented differently.

Escape sequences:

| Escape Sequence | Description                       |
|-----------------+-----------------------------------|
| ~\"~            | double quote                      |
| ~\\~            | backslash                         |
| ~\$~            | dollar sign                       |
| ~\a~            | audible bell                      |
| ~\b~            | backspace                         |
| ~\f~            | form feed                         |
| ~\n~            | line feed                         |
| ~\r~            | carriage return                   |
| ~\t~            | horizontal tab                    |
| ~\v~            | vertical tab                      |
| ~\^~ c          | control character (see below)     |
| ~\u~ nnnn       | arbitrary unicode codepoint (hex) |
| ~\U~ nnnnnn     | arbitrary unicode codepoint (hex) |


The "control character" escape uses a character with codepoint between
U+0040 and U+005F (i.e. capital letters, ~@~, ~[~, ~\~, ~]~, ~^~, and
~_~) and produces a character with codepoint 64 less. For example,
~\^@~ produces the null character, ~\^H~ produces backspace, etc.

"Unicode codepoint" escapes must correspond to non-surrogate
codepoints. That is, they must be in the range ~0~-~10FFFF~, excluding
~D800~-~DFFF~.

There are three productions for string literals. The first is similar
to Standard ML's or Haskell's string. An ~s-char~ is any character
except ~"~, ~\~, or the newline character. These literals may contain
"gaps" (pairs of backslashes enclosing only whitespace) which are
ignored. This allows long strings to be written on more than one line.

The second production is similar to Python's multiline strings. An
~m-char~ is any character except ~\~.

The third production is similar to C++'s raw string literals and does
not permit any escaping. It starts with ~R"~, an optional
~rd-char-seq~, and ~(~, and ends with ~)~, the same optional
~rd-char-seq~, and ~"~. An ~rd-char-seq~ is a sequence of characters
excluding ~(~, ~)~, ~\~, the null character, and whitespace. An
~r-char-seq~ is a sequence of any characters at all, except that it
may not contain the string's closing sequence as a substring (that is,
~)~ followed by the initial ~rd-char-seq~ and ~"~).

A character literal is a single ~s-char~ or escape enclosed between
~#"~ and ~"~.

Any of the three types of string literals can be used to create a
formatted string literal by prepending an ~f~ or ~F~. Formatted string
literals may contain two kinds of substring that cause a value to be
interpolated into the string. The first is a ~$~ followed by an
identifier, which is replaced by the value associated with the
identifier, which must be printable. The second is an expression
enclosed by ~${~ and ~}~, which is replaced by the value of the
expression, which must be printable. The contents of the substring
representing the expression need not follow the character restrictions
of the enclosing literal. For example, ~f"Hello, ${"world"}"~ is a
legal formatted string literal, despite the interpolated expression
containing ~"~ characters.

Format string literals actually lex into one or more tokens. The
initial string segment is a token of type ~fstring-start~. String
segments following substitutions are tokens of type ~fstring-cont~.
Identifier substitutions become tokens of type ~fstring-ivar~.
Expression substitutions become a token of ~fstring-iexpr-s~, followed
by the tokens of the expression, followed by a token of
~fstring-iexpr-f~. ~fstring-ivar~ and ~fstring-iexpr-f~ tokens are
always followed by an ~fstring-cont~ token, even if the string segment
is empty.

**** TODO define printable

** Identifiers

#+begin_src bnf
  word-id -> word-start word-continue*
  type-id -> ''' word-continue+
  operator-id -> symbol-grapheme-cluster+
  symbol -> ascii-symbol | unicode-symbol
  ascii-symbol -> '!' | '#' | '$' | '%' | '&' | '*' | '+' | '-'
               |  '/' | ':' | '<' | '=' | '>' | '?' | '@' | '\'
               |  '^' | '|' | '~'
#+end_src

Emil permits three types of identifier: type variable identifiers,
word-like identifiers, and operator-like identifiers. Reserved words
([[#reserved-identifiers][listed below]]) may not be used as identifiers.

An operator identifier consists of one or more symbols, which are
grapheme clusters that start with a character taken from a restricted
subset of ascii symbols or a non-ascii unicode codepoint in the
general categories of Symbol or Punctuation.

Emil's use of word identifiers conforms to Unicode Standard Annex #31,
[[https://www.unicode.org/reports/tr31/tr31-35.html]["Unicode Identifer and Pattern Syntax"]], Revision 35, observing R1
(with a profile) and R4 (with normalization form C). Word identifiers
start with a character from one of the [[https://www.unicode.org/reports/tr31/tr31-35.html#Table_Recommended_Scripts][recommended scripts]] with the
unicode property ~XID_Start~, or ~_~ (underscore). In the ascii range,
the ~XID_Start~ property corresponds to the letters, and this more or
less holds in the other unicode blocks. Characters after the first may
be any starting character, ~'~ (apostrophe), or a character from one
of the recommended scripts with the unicode property ~XID_Continue~.
In the ascii range, this adds the numbers; in other blocks it also
adds modifier letters, combining diacritical marks, etc. Type variable
identifiers start with ~'~ and continue as word-like identifiers.

Word identifiers are case sensitive but decomposition-insensitive:
Identifiers with the same value after applying [[https://www.unicode.org/reports/tr15/][Normalization Form C]]
are treated as equivalent. For example, the identifer ~Ã ~ would be the
same whether the source file encoded it as ~U+00E0~ or
~U+0061~~U+0300~.

*** Reserved Identifiers
:PROPERTIES:
:CUSTOM_ID: reserved-identifiers
:END:


The following are reserved words used in the core language and may
not be used as identifiers.

#+begin_example
  Inf    NaN    and    as    case    datatype    else    end
  exception    fn    fun    handle    if    implicit    in    infix
  infixr    let    local    nonfix    of    op    open    prefix
  raise    rec    then    type    val    while    withtype
  :    _    |    =>    ->    #
#+end_example

** Comments

Comments begin with ~(*~ that is not in a string literal and end with
~)*~. They may be nested, so the number of ~)*~ must match the number
of ~(*~ in a well-formed program. Comments are treated as whitespace
for the purpose of lexical analysis.

** Other syntactic elements

The following tokens are used for various syntactic purposes:

#+begin_src
  (    )    [    ]    ,    ;    .
#+end_src

* Syntax and Semantics

As Standard ML does, Emil divides the language into three parts. The
core language provides the nuts and bolts, like variable declarations,
function definitions, expressions, etc. Modules provide facilities for
organizing large programs and for function overloading. Finally,
Programs deal with specifying what is actually executed at runtime.

** Core Language

*** Types

Every expression has an associated type expression. In most cases, a
(possibly polymorphic) type expression can be inferred by the
compiler, but the programmer may provide a type expression to resolve
an ambiguity or for documentation purposes.

**** Type Expressions

#+begin_src bnf
  ty -> type-id
      | { [rt-row (',' rt-row)*] }
      | ty-seq qual-word-id
      | ty ('*' ty)+
      | ty '->' ty
      | '(' ty ')'
  rt-row -> word-id ':' ty
  ty-seq -> [ty]
         | '(' ty (',' ty)+ ')'
  type-id-seq -> [type-id]
               | '(' type-id (',' type-id)+ ')'
  qual-word-id -> (word-id '.')* word-id
#+end_src

A type expression describes a type or a polymorphic family of types. A
type variable (e.g. ~'a~, ~'key~) stands in for any type. Record type
expressions (~{...}~), tuple type expressions (~ty1 * ty2 * ...~), and
function type expressions (~ty1 -> ty2~) are described below when
those types are introduced.

A type constructor is a (possibly qualified) word-like identifier that
accepts zero or more type parameters. Conventionally, the identifier
begins with a lowercase letter. For example, ~bigint~ is a nullary
type constructor for a built-in numeric type. ~list~ is a unary type
constructor for the built-in linked list type. ~'a list~ is a
type scheme that can be instantiated as a list of any type, such as
~bigint list~ or ~bigint list list~. You could imagine a binary type
constructor ~Map.map~, which would be defined in a module called
~Map~. This could be used in type expressions like ~('k, 'v) Map.map~,
~(string, 'v) Map.map~, or ~(string, bigint) Map.map~.

Type expressions may be added to expressions and match patterns by
appending a ~:~ and the type expression.

**** Built-in Numeric Types

The built-in numeric types are the following:

- ~bigint~ :: A multiprecision signed integer whose size is limited only
  by the memory of the machine. This is the type of an integer
  constant with no ~i~ suffix.
- ~int~ :: A 64-bit signed integer.
- ~byte~ :: An 8-bit unsigned integer.
- ~float~ :: An IEEE-754 ~binary64~ floating-point number.

Standard mathematical operations are provided by
[[#default-prelude][the default prelude]].

**** Other Built-in Types

#+begin_src bnf
  tuple-expr -> '(' [expr (',' expr)+] ')'
  list-expr -> '[' [expr (',' expr)*] ']'
  record-expr -> '{' [re-row (',' re-row)*] '}'
  re-row -> word-id '=' expr
#+end_src

Emil provides several more built-in types that have syntax support or
are used by the constructs of the language. Additional types are
provided by the [[#default-prelude][default prelude]].

~bool~ has two values, ~true~ and ~false~. It is used in ~if~
expressions.

~char~ is a Unicode codepoint (but not a surrogate in the range from
~U+D800~ to ~U+DFFF~). The language supports character literals
starting with ~#"~ and ending with ~"~.

~string~ is conceptually a sequence of ~char~, and may be represented
internally using any Unicode encoding.

~'a list~ is a linked list with elements of type ~'a~. Lists can be
constructed in two ways. The first is ~el1 :: el2 :: ... :: eln ::
nil~, and the second is ~[el1, el2, ..., eln]~ (which is syntactic
sugar for the first). Using either syntax, expressions in a list value
are evaluated in the order they appear. Lists must have elements of
the same type.

Tuples are a family of types. The elements of tuples may have
different types. Tuple types are ~unit~ (a 0-tuple), ~'a * 'b~ (a pair
whose first element has type ~'a~ and whose second element has type
~'b~), ~'a * 'b * 'c~ (a 3-tuple with elements of types ~'a~, ~'b~,
and ~'c~), etc. There are no 1-tuples; use a value instead. Tuple
values are written ~()~ (the unique value of ~unit~ type), ~(el1,
el2)~ (a pair), etc. Expressions in tuple values are evaluated in the
order they appear.

Records are another family of types. Like tuples, elements of records
may have different types. Unlike tuples, records' elements are
unordered and have names. Records have zero or more labels. Record
types expressions look like ~{ label1: type1, label2: type2, ... }~.
Record types ignore the order of the labels, so ~{ foo: int, bar:
string }~ and ~{ bar: string, foo: int }~ are the same type. Record
values are written ~{ label1=expr1, label2=expr2 }~. The expressions
in a record value are evaluated in the order they appear.

**** User-defined types

#+begin_src bnf
  type-decl -> 'type' type-bind
  dtype-decl -> 'datatype' dtype-bind [withtype type-bind]
  dtype-alias-decl -> 'datatype' word-id '=' 'datatype' qual-word-id

  type-bind -> one-type-bind ('and' one-type-bind)*
  one-type-bind -> type-id-seq word-id '=' ty

  dtype-bind -> one-dtype-bind ('and' one-dtype-bind)*
  one-dtype-bind -> type-id-seq word-id '=' con-bind

  con-bind -> one-con-bind ('|' one-con-bind)*
  one-con-bind -> word-id ['of' ty]
                | op-id ty
                | ty op-id ty
#+end_src

Types may be defined by users in three ways.

A type alias introduces a new type constructor for an existing type.
The new type is entirely equivalent to the aliased type, and in fact
the compiler may refer to the aliased type in error messages even when
the program refers to the new type. Mutually dependent type aliases
can be joined with the ~and~ keyword. A few examples:

#+begin_src emil
  type int64 = int
  type intlist = int list
  type 'v strmap = (string, 'v) Map.map
  type ('k, 'v') dict = ('k, 'v) Map.map
  (* The next declaration could be rewritten as

     type str = string
     type sstable = (str, str) Map.map

     but this feature is important when combined with datatypes.
   ,*)
  type sstable = (str, str) Map.map
   and str = string
#+end_src

A datatype declaration introduces a type constructor for a new sum
type along with one or more value constructors. Value constructors are
word-like identifiers and they conventionally start with capital
letters. After being declared in a datatype declaration, value
constructors behave like functions; when they are called, they
evaluate to a value of the new type. Mutually dependent datatypes can
be joined with the ~and~ keyword; datatypes can be joined with
mutually dependent type aliases with the ~withtype~ keyword. A few
examples:

#+begin_src emil
  datatype suit = Spades | Hearts | Diamonds | Clubs

  datatype 'a tree = Empty | Node of 'a * 'a forest
       and 'a forest = Nil | Cons of 'a tree * 'a forest

  datatype 'a StreamCell = Nil | Cons of 'a * 'a Stream
  withtype 'a Stream = 'a StreamCell susp

  datatype arith_expr = Number bigint
         | bigint ~+ bigint
         | bigint ~- bigint
         | ~- bigint

  datatype declaration = Val of var * expression
                       | Func of var list * expression
       and expression = Int of int
                      | FuncApp of var * expression list
                      | Let of declaration list * expression
       and ty = TyVar of string
              | TyCon of tyseq * string
  withtype var = { name: string, typename: ty }
       and tyseq = ty list
#+end_src

The third way to declare a type is datatype replication. This
introduces an alias for a type constructor and its value constructors.
For example, if the ~Cards~ module contains the ~suit~ datatype in the
previous example, then ~datatype color = datatype Cards.suit~
introduces ~color~ as an alias for ~Cards.suit~ as well as ~Spades~,
~Hearts~, ~Diamonds~, and ~Clubs~ as aliases for the corresponding
value constructors from ~Cards~.

*** Expressions

#+begin_src bnf
  expr -> infix-expr [: ty]
        | handle-expr
        | raise-expr
        | while-expr

  qual-op-id -> (word-id '.')* op-id
  infix-expr -> left-expr qual-op-id infix-expr
              | qual-op-id infix-expr
              | left-expr
  left-expr -> application-expr
             | if-expr
             | case-expr
             | fn-expr
  application-expr -> atomic-expr+
#+end_src

Function application binds tightly in Emil; any sequence of atomic
expressions is a function application. After that, there are a number
of "left expressions"; that is, expressions that can be on the
left-hand side of a binary operator. The precedence of infix and
prefix operators are determined by fixity declarations (see below).
Finally, the least tightly binding part of an expression are type
annotations and a few constructs that don't typically make sense as
part of a binary expression and would otherwise cause unintuitive
parses.

**** Atomic Expressions

#+begin_src bnf
  atomic-expr -> literal
               | qual-word-id
               | 'op' ['prefix'] qual-op-id
               | record-expr
               | tuple-expr
               | list-expr
               | '(' expr (';' expr)+ ')'
               | 'let' decl 'in' expr (';' expr)* 'end'
               | '(' expr ')'

  literal -> iliteral
           | fpliteral
           | string
           | char
           | fstring-literal

  fstring-literal -> fstring-start (fstring-subs fstring-cont)*

  fstring-subs -> fstring-ivar
                | fstring-iexpr-s expr fstring-expr-f
#+end_src

Most of the atomic expressions are constructs that have been described
already. Literals, record expressions, tuple expressions, and list
expressions evaluate to the appropriate value. Qualified word
identifiers evaluate to the value they are bound to. Parenthesized
expressions evaluate to the result of the inner expression.

Qualified operator identifiers evaluate to one of the values they are
bound to. Operators may have two different bindings: prefix and infix.
The ~op~ and ~op prefix~ particles change the way operators
participate in expressions. Without such a particle, the operator is
parsed as part of an ~infix-expr~ production. Its position determines
whether the infix or prefix version of the operator is used, and its
precedence is used to determine how the expression parses. With ~op~,
the infix version of the operator is used. With ~op prefix~, the
prefix version of the operator is used. With either particle, the
operator is parsed as part of an ~atomic-expr~ production and the
precedence of the operator is not used to parse the expression.
Precedence and fixity are described more below.

Two or more expressions within parentheses and separated by ~;~ are
sequenced. They are evaluated in order and the value of the sequenced
expression is the value of the last exception. All expressions except
the last must be of type ~unit~.

A let expression has a declaration section and an expression section.
The declaration section contains one or more declarations whose scope
extends until the end of the expression section; in particular,
earlier declarations are available to later declarations in the same
section and all declarations are available in the expression section.
The expression section contains one or more expressions separated by
~;~. As in sequence expressions, the value of the let expression is
the value of the last expression, and all but the last must be of type
~unit~.

** Modules

** Programs

* Default Prelude and Standard Modules
:PROPERTIES:
:CUSTOM_ID: default-prelude
:END:
